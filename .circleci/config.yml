version: 2.1

orbs:
  cyber4all: cyber4all/orb@2.1.9
  node: circleci/node@6.3.0

# This is a solution for the outdated version of angular we are using
jobs:
  install-node-lint-build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          node-version: '18.19.0'
      - run: npm install
      - run: npm run lint
      - run: npm run build:prod

  upload-source-maps:
    parameters:
      environment:
        type: string
        description: 'The environment to build and upload source maps for (staging or production)'
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          node-version: '18.19.0'
      - run: npm install
      - run:
          name: Build for << parameters.environment >>
          command: npm run build:<< parameters.environment >>
      - run:
          name: Upload source maps to Coralogix
          command: |
            PACKAGE_VERSION=$(jq -r '.version' package.json)
            if [ "<< parameters.environment >>" = "staging" ]; then
              COMMIT_HASH=$(git rev-parse --short HEAD)
              export RUM_VERSION="${PACKAGE_VERSION}-${COMMIT_HASH}"
            else
              export RUM_VERSION=${PACKAGE_VERSION}
            fi
            npm run rum:upload-<< parameters.environment >>

workflows:
  continuous-integration:
    jobs:
      - install-node-lint-build

  deploy-staging:
    when:
      equal: [main, <<pipeline.git.branch>>]
    jobs:
      - upload-source-maps:
          name: upload-source-maps-staging
          environment: staging
      - cyber4all/s3:
          requires:
            - upload-source-maps-staging
          context:
            - aws_staging
            - Slack
          bucket: 'clark-client-staging'
          distribution_id: STAGING_CLOUDFRONT_ID
          script: build:staging

  deploy-prod:
    when:
      equal: [releases, <<pipeline.git.branch>>]
    jobs:
      - cyber4all/release:
          context: [Github]
          tag: $(jq -r '.version' package.json)

      - upload-source-maps:
          requires:
            - cyber4all/release
          name: upload-source-maps-production
          environment: prod

      - cyber4all/s3:
          requires:
            - upload-source-maps-production
          context:
            - AWS
            - Slack
          bucket: 'clark.center'
