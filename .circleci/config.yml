version: 2.1

orbs:
  cyber4all: cyber4all/orb@1

commands:
  create-story:
    parameters:
      version:
        type: string
    steps:
      - run: 
          name: Create Story
          environment:
            LANGUAGE: node
            VERSION: <<parameters.version>>
            WORKFLOW_STATE_ID: 500005737
            PROJECT_ID: 14743
            GROUP_ID: 61ae65f8-ec5a-4f81-8b85-76516b014ed5
          command: |
            #!/usr/bin/env python3

            import requests, json, datetime, os

            # -------------------------------------------------------
            # ENVIRONMENT VARIABLES (SET BY ORB)
            #
            # ** throws error if any of the ENV do not exist **
            # -------------------------------------------------------

            CIRCLE_BUILD_URL=os.environ['CIRCLE_BUILD_URL']
            SHORTCUT_TOKEN=os.environ['SHORTCUT_TOKEN']
            REPOSITORY=os.environ['CIRCLE_PROJECT_REPONAME']
            LANGUAGE=os.environ['LANGUAGE']
            VERSION=os.environ['VERSION']
            WORKFLOW_STATE_ID=int(os.environ['WORKFLOW_STATE_ID'])
            PROJECT_ID=int(os.environ['PROJECT_ID'])
            GROUP_ID=os.environ['GROUP_ID']

            # -------------------------------------------------------
            # SHORTCUT APIv3 CONFIGURATION
            # -------------------------------------------------------

            DEADLINE=datetime.datetime.today() + datetime.timedelta(days=14)
            DESCRIPTION=f"""
            ## *Repositories*: {REPOSITORY}

            ## Description

            Post deployment or quarterly review of Software Bill of Materials (SBOM) for {REPOSITORY}:{VERSION}. This story will track the vulnerability analysis of the SBOM and any dependency upgrades.

            ## Requirements

            1. Download and scan SBOM using cve-bin-tool
            2. Upload scan results to Shortcut story
            3. Upgrade dependencies with HIGH or CRITICAL vulnerabilities

            ## Documentation

            [CVE_BIN_TOOL Documentation](https://cve-bin-tool.readthedocs.io/en/latest/README.html#scanning-an-sbom-file-for-known-vulnerabilities)

            ### CVE Databases

            [NIST NVD Homepage](https://nvd.nist.gov/)
            [OpenSSF OSV Homepage](https://osv.dev/)
            """

            # -------------------------------------------------------
            # CREATE STORY PAYLOAD
            # -------------------------------------------------------

            DATA = {
                "name": f"Review {REPOSITORY}:{VERSION} SBOM",
                "workflow_state_id": WORKFLOW_STATE_ID,
                "project_id": PROJECT_ID,
                "group_id": GROUP_ID,
                "description": DESCRIPTION,
                "move_to": "first",
                "deadline": DEADLINE.strftime("%Y-%m-%d"),
                "story_type": "chore",
                "tasks": [ 
                    {
                        "description": f"Analyze {REPOSITORY}:{VERSION} SBOM for vulnerabilities"
                    },
                    {
                        "description": "Upgrade dependencies"
                    }
                ],
                "external_links": [ CIRCLE_BUILD_URL ],
                "labels": [
                    {
                        "color": "#a8324e",
                        "description": "Repository",
                        "name": REPOSITORY
                    },
                    {   
                        "color": "#1c70dd",
                        "description": "Language",
                        "name": LANGUAGE
                    },
                    {
                        "color": "#A020F0",
                        "description": "Version",
                        "name": VERSION
                    }
                ]
            }

            # -------------------------------------------------------
            # CREATE STORY REQUEST
            # -------------------------------------------------------

            res = requests.post(
                url="https://api.app.shortcut.com/api/v3/stories",
                headers={
                    "Content-Type": "application/json",
                    "Shortcut-Token": SHORTCUT_TOKEN
                },
                data=json.dumps(DATA)
            )
            res.raise_for_status()

jobs:
  sbom:
    machine:
      image: ubuntu-2004:current
    steps:
      - checkout
      - run:
          name: Prepare Artifacts Directory
          command: |
            mkdir ./artifacts
      - run:
          name: Install CycloneDX Node
          command: |
            sudo apt install nodejs npm

            sudo npm i -g @cyclonedx/bom@3.10.6
      - run:
          name: Install Node Modules
          command: npm ci
      - run:
          name: Generate CycloneDX SBOM
          command: cyclonedx-node -d -o ./artifacts/cyclonedx-sbom.json
      - run:
          name: cve-bin-tool SBOM anlaysis
          command: |
            docker run --env BOM_FILE=cyclonedx-sbom.json -v $(pwd)/artifacts:/home/alpine/src --name cve-bin-tool cyber4all/cve-bin-tool:latest || true
      - run:
          name: docker cp
          command: |
            docker cp cve-bin-tool:/home/alpine/output.cve-bin-tool.$(date "+%Y-%m-%d").html ./artifacts
      - store_artifacts:
          path: ./artifacts
      - create-story:
          version: $(jq -r '.version' package.json)


workflows:
  integration-testing:
    jobs:
      - cyber4all/deploy-s3:
          deploy: false # explicitly shows in develeopment
          filters:
            branches:
              ignore: releases

      - cyber4all/test-app:
          docker-image: cimg/node:lts
          node-test: test:unit
          isNode: true

  continuous-deployment:
    jobs:
      - sbom:
          context: [Shortcut]
          # language: node
          # version: $(jq -r '.version' package.json)
          filters:
            branches:
                only:
                  - releases
                  - chore/sc-14941/add-sbom-on-releases

      - cyber4all/deploy-s3:
          context:
            [AWS, Slack]
          tag: $(cat ./package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
          deploy: true
          source: dist
          isAngular: true
          filters:
            branches:
              only:
                - releases
